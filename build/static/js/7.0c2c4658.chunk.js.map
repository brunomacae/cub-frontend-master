{"version":3,"sources":["hooks/useKingdomAPRAPY.ts","components/Balance.tsx","views/Farms/components/FarmCard/AprApy.tsx","views/Kingdoms/components/KingdomCard.tsx","views/Kingdoms/components/KingdomDetail.tsx","views/Kingdoms/components/DividerBlue.tsx","views/Kingdoms/components/Kingdom.tsx","views/Kingdoms/components/CardValue.tsx","views/Kingdoms/Kingdoms.tsx"],"names":["useKingdomAPRAPY","isKingdom","isKingdomToken","tokenPriceVsQuote","poolWeightPCS","pcsCompounding","cubAPR","lpTokenBalanceMC","lpTotalInQuoteTokenPCS","quoteTokenPriceUsd","apr","cakePrice","useBusdPriceFromPid","extra","getPoolApr","getBalanceNumber","BigNumber","times","DEFAULT_TOKEN_DECIMAL","parseFloat","totalLiquidity","getFarmApr","dailyAPR","div","toNumber","farmAPY","totalAPY","totalAPYString","toLocaleString","maximumFractionDigits","pcsApr","Balance","value","fontSize","color","decimals","isDisabled","unit","bold","previousValue","useRef","useEffect","current","start","end","duration","separator","defaultProps","AprApy","aprApy","lpLabel","addLiquidityUrl","isDetails","TranslateString","useI18n","farmAPR","justifyContent","toFixed","alignItems","style","display","ApyButton","height","width","KCard","styled","props","theme","card","background","Button","UiButton","Values","Brackets","span","colors","text","KingdomCard","farm","walletBalance","depositBalance","rewardBalance","walletBalanceQuoteValue","depositBalanceQuoteValue","account","location","useLocation","useState","requestedApproval","setRequestedApproval","pendingTx","setPendingTx","pid","isTokenOnly","lpSymbol","lpAddresses","address","token","tokenName","toUpperCase","userData","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","usePriceCakeBusd","earningsBusd","multipliedBy","web3","useWeb3","onStake","useStake","onUnstake","useUnstake","onReward","useHarvest","isApproved","isGreaterThan","useModal","DepositModal","max","onConfirm","onPresentDeposit","WithdrawModal","onPresentWithdraw","lpAddress","getAddress","tokenAddress","lpContract","useMemo","getBep20Contract","onApprove","useApprove","handleApprove","useCallback","a","console","error","approvedButton","mt","disabled","pathname","includes","onClick","className","CardBusdValue","fullWidth","Details","Detail","KDetail","StyledLinkExternal","Link","KingdomDetail","farmName","oneTokenQuoteValue","removed","tokenValueFormated","toString","multiplier","quoteToken","kingdomContract","replace","liquidityUrlPathParts","getLiquidityUrlPathParts","quoteTokenAddress","exchangeUrl","PCS_ADD_LIQUIDITY_URL","BASE_ADD_LIQUIDITY_URL","process","farmContract","vaultContract","infoAddress","external","href","primary","ExpandingWrapper","expanded","K","KImage","Image","Kingdom","bnbPrice","ethereum","showExpandableSection","setShowExpandableSection","lpTotalInQuoteToken","kingdomSupply","pcsPid","lpTokenBalancePCS","busdPrice","farmImage","split","toLocaleLowerCase","Number","earnings","rawTokenBalance","rawStakedBalance","rawEarningsBalance","tokenPrice","totalValueFormated","undefined","src","alt","ExpandableSectionButton","onlyArrow","StyledText","Text","CardValue","prefix","useCountUp","countUp","update","updateValue","FeeWrapper","Kingdoms","totalValue","useTotalValueKingdoms","useFarms","farmsLP","data","userDataLoaded","useWeb3React","dispatch","useAppDispatch","fastRefresh","useRefresh","fetchFarmUserDataAsync","isArchived","isActive","activeFarms","filter","isArchivedPid","farmsList","farmsToDisplay","map","poolWeight","liquidity","farmsStakedMemoized","farmsStaked","PageHeader","as","size","mb","textAlign","target","rel","Page","id"],"mappings":"+VAiDeA,EAzCU,SACvBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IACIC,EADEC,EAAYC,YAAoB,GAGlCC,EAAQ,KACZ,GAAIZ,EAAW,CACb,GAAIC,EACFQ,EAAMI,YACJX,EACAA,EACAY,YAAiB,IAAIC,IAAUT,GAAkBU,MAAMC,KAAwB,IAC/EC,WAAW,WAEV,CACH,IAAMC,EAAiB,IAAIJ,IAAUR,GAAwBS,MAAMR,GAEnEC,EAAMW,YAAWjB,EAAeO,EAAWS,EAAgBnB,GAG7D,IAAMqB,EAAW,IAAIN,IAAUN,GAAKa,IAAI,IAAIP,IAAU,MAAMQ,WAEtDC,EAAyE,KAA9D,SAAGf,EAAM,IAAML,EAAkB,EAAMA,GAAkB,GACpEqB,EAAWpB,EAASA,EAASmB,EAAUA,EACvCE,EAAiBD,GAAYA,EAASE,eAAe,QAAS,CAAEC,sBAAuB,IAE7FhB,EAAQ,CAAEiB,OAAQpB,EAAKY,WAAUG,UAASC,WAAUC,kBAGtD,OAAOd,G,0BC7BHkB,EAAkC,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,MAAOC,EAAwD,EAAxDA,SAAUC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACvFC,EAAgBC,iBAAO,GAM7B,OAJAC,qBAAU,WACRF,EAAcG,QAAUV,IACvB,CAACA,IAGF,eAAC,IAAD,CAAMM,KAAMA,EAAMJ,MAAOE,EAAa,eAAiBF,EAAOD,SAAUA,EAAxE,UACE,cAAC,IAAD,CAASU,MAAOJ,EAAcG,QAASE,IAAKZ,EAAOG,SAAUA,EAAUU,SAAU,EAAGC,UAAU,MAC7Fd,GAASK,GAAQ,+BAAOA,QAK/BN,EAAQgB,aAAe,CACrBd,SAAU,OACVG,YAAY,EACZF,MAAO,OACPC,SAAU,GAGGJ,I,8BAAAA,I,kBCoDAiB,EA5EuB,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAASC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,gBAAiBC,EAAgB,EAAhBA,UACpEC,EAAkBC,cAChBC,EAAuFN,EAAvFM,QAAS7C,EAA8EuC,EAA9EvC,IAAKL,EAAyE4C,EAAzE5C,eAAgByB,EAAyDmB,EAAzDnB,OAAQR,EAAiD2B,EAAjD3B,SAAUG,EAAuCwB,EAAvCxB,QAASE,EAA8BsB,EAA9BtB,eAAgBhB,EAAcsC,EAAdtC,UAEjF,OAAIyC,EAEA,qCACE,eAAC,IAAD,CAAMI,eAAe,gBAArB,UACE,eAAC,IAAD,CAAMtB,MAAM,UAAZ,UAAuBmB,EAAgB,IAAK,aAA5C,OACA,eAAC,IAAD,CAAMf,MAAI,EAACJ,MAAM,UAAjB,UAA4BP,EAA5B,UAEF,eAAC,IAAD,CAAM6B,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOH,EAAgB,IAAK,YAA5B,OACA,cAAC,IAAD,oBAAU,IAAIrC,IAAUc,GAAQ2B,QAAQ,GAAxC,cAAgD,IAAIzC,IAAUM,GAAUmC,QAAQ,GAAhF,WAEF,eAAC,IAAD,CAAMD,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOH,EAAgB,IAAK,oBAA5B,OACA,eAAC,IAAD,eAAQhD,QAEV,eAAC,IAAD,CAAMmD,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOH,EAAgB,IAAK,YAA5B,OACA,cAAC,EAAD,CACEpB,SAAS,OACTD,MAAOP,EACPU,SAAU,EACVE,KAAK,SAGT,eAAC,IAAD,CAAMmB,eAAe,gBAAgBE,WAAW,SAAhD,UACE,eAAC,IAAD,WAAOL,EAAgB,IAAK,WAA5B,OACA,cAAC,IAAD,CAAMf,MAAI,EAACqB,MAAO,CAAEC,QAAS,OAAQF,WAAY,UAAjD,SACGhD,EACC,qCACE,cAACmD,EAAA,EAAD,CAAWX,QAASA,EAASC,gBAAiBA,EAAiBxC,UAAWA,EAAWD,IAAKA,IACzF6C,EAFH,OAKA,cAAC,IAAD,CAAUO,OAAQ,GAAIC,MAAO,aAQvC,qCACE,eAAC,IAAD,CAAMP,eAAe,gBAArB,UACE,eAAC,IAAD,CAAMtB,MAAM,UAAZ,UAAuBmB,EAAgB,IAAK,aAA5C,OACA,eAAC,IAAD,CAAMf,MAAI,EAACJ,MAAM,UAAjB,UAA4BP,EAA5B,UAEF,eAAC,IAAD,CAAM6B,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOH,EAAgB,IAAK,YAA5B,OACA,cAAC,EAAD,CACEpB,SAAS,OACTD,MAAOP,EACPU,SAAU,EACVE,KAAK,SAGT,eAAC,IAAD,CAAMmB,eAAe,gBAAgBE,WAAW,SAAhD,UACE,eAAC,IAAD,WAAOL,EAAgB,IAAK,WAA5B,OACA,cAAC,IAAD,CAAMf,MAAI,EAACqB,MAAO,CAAEC,QAAS,OAAQF,WAAY,UAAjD,SACGhD,EACC,qCACE,cAACmD,EAAA,EAAD,CAAWX,QAASA,EAASC,gBAAiBA,EAAiBxC,UAAWA,EAAWD,IAAKA,IACzF6C,EAFH,OAKA,cAAC,IAAD,CAAUO,OAAQ,GAAIC,MAAO,c,gIC3DnCC,I,OAAQC,IAAO1C,IAAV,kWAEO,SAAC2C,GAAD,OAAWA,EAAMC,MAAMC,KAAKC,eAYxCC,GAASL,YAAOM,IAAPN,CAAH,uFAMNO,GAASP,IAAO1C,IAAV,8CAINkD,GAAWR,IAAOS,KAAV,2CACH,SAACR,GAAD,OAAWA,EAAMC,MAAMQ,OAAOC,QA4J1BC,GA9IiC,SAAC,GAS1C,IARLC,EAQI,EARJA,KACAC,EAOI,EAPJA,cACAC,EAMI,EANJA,eACAC,EAKI,EALJA,cACAC,EAII,EAJJA,wBACAC,EAGI,EAHJA,yBACAhC,EAEI,EAFJA,gBACAiC,EACI,EADJA,QAEMC,EAAWC,cACjB,EAAkDC,oBAAS,GAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACQC,EAA2Fd,EAA3Fc,IAAKC,EAAsFf,EAAtFe,YAAa5F,EAAyE6E,EAAzE7E,UAAWC,EAA8D4E,EAA9D5E,eAAgB4F,EAA8ChB,EAA9CgB,SAAUC,EAAoCjB,EAApCiB,YAAsBC,EAAclB,EAAvBmB,MAASD,QAE/EE,EAAYJ,EAASK,cAC3B,EAIIrB,EAAKsB,UAAY,GAJrB,IACEC,UAAWC,OADb,MACiC,EADjC,MAEEC,aAAcC,OAFhB,MAEuC,EAFvC,MAGEC,cAAeC,OAHjB,MAGyC,EAHzC,EAKML,EAAY,IAAIrF,IAAUsF,GAC1BC,EAAe,IAAIvF,IAAUwF,GAC7BC,EAAgB,IAAIzF,IAAU0F,GAC9B/F,EAAYgG,cACZC,EAAe3B,EAAgB,IAAIjE,IAAUiE,GAAe4B,aAAalG,GAAWa,WAAa,EAEjGsF,EAAOC,eACLC,EAAYC,aAASrB,EAAK3F,GAA1B+G,QACAE,EAAcC,aAAWvB,EAAK3F,GAA9BiH,UACAE,EAAaC,aAAWzB,EAAK3F,GAA7BmH,SAEFE,GAAalC,GAAWiB,GAAaA,EAAUkB,cAAc,GAEnE,GAA2BC,YACzB,cAACC,EAAA,EAAD,CAAcC,IAAKnB,EAAcoB,UAAWX,EAASd,UAAWA,EAAW/C,gBAAiBA,EAAiB0C,YAAaA,EAAa3F,eAAgBA,KADlJ0H,GAAP,qBAGA,GAA4BJ,YAC1B,cAACK,GAAA,EAAD,CAAeH,IAAKjB,EAAekB,UAAWT,EAAWhB,UAAWA,EAAWL,YAAaA,EAAa3F,eAAgBA,KADpH4H,GAAP,qBAIMC,GAAYC,aAAWjC,GACvBkC,GAAeD,aAAWhC,GAC1BkC,GAAaC,mBAAQ,WACzB,OAAGtC,GAAe3F,EACTkI,aAAiBH,GAAcnB,GAEjCsB,aAAiBL,GAAWjB,KAClC,CAACiB,GAAWlC,EAAaiB,EAAMmB,GAAc/H,IAExCmI,GAAcC,aAAWJ,GAAYjI,GAArCoI,UAEFE,GAAgBC,sBAAW,sBAAC,sBAAAC,EAAA,sEAE9BhD,GAAqB,GAFS,SAGxB4C,KAHwB,OAI9B5C,GAAqB,GAJS,gDAM9BiD,QAAQC,MAAR,MAN8B,yDAQ/B,CAACN,KAEEO,GACJ,cAACtE,GAAD,CACEuE,GAAG,MACHC,SAAUtD,GAAqBH,EAAS0D,SAASC,SAAS,YAC1DC,QAASV,GAHX,8BASF,OACE,cAACvE,GAAD,UACE,qBAAKkF,UAAU,SAAf,SACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,MAAf,UACE,cAAC,IAAD,CAAM1F,eAAe,gBAArB,SACE,cAAC,IAAD,iCAEF,eAACgB,GAAD,WACE,cAAC,EAAD,CACEvC,SAAS,OACTD,MAAO+C,EACP5C,SAAU4C,EAAgB,EAAI,EAC9B1C,KAAK,KALT,OAOQ,cAACoC,GAAD,gBAAsB,cAAC0E,EAAA,EAAD,CAAenH,MAAOkD,IAA2B,cAACT,GAAD,mBAE7E6C,GACA,cAAChD,GAAD,CAAQuE,GAAG,MAAMO,WAAS,EAACH,QAASrB,GAApC,qBAEAgB,MAGJ,sBAAKM,UAAU,MAAf,UACE,cAAC,IAAD,CAAM1F,eAAe,gBAArB,SACE,cAAC,IAAD,iCAEF,eAACgB,GAAD,WACE,cAAC,EAAD,CACEvC,SAAS,OACTD,MAAOgD,EACP7C,SAAU6C,EAAiB,EAAI,EAC/B3C,KAAK,KALT,OAOQ,cAACoC,GAAD,gBAAsB,cAAC0E,EAAA,EAAD,CAAenH,MAAOmD,IAA4B,cAACV,GAAD,mBAE9E6C,GACA,cAAChD,GAAD,CAAQuE,GAAG,MAAMO,WAAS,EAACH,QAASnB,GAApC,sBAEAc,MAGJ,sBAAKM,UAAU,MAAf,UACE,cAAC,IAAD,0BACA,eAAC1E,GAAD,WACE,cAAC,EAAD,CACEvC,SAAS,OACTD,MAAOiD,EACP9C,SAAU8C,EAAgB,EAAI,EAC9B5C,KAAK,KALT,OAOQ,cAACoC,GAAD,gBAAsB,cAAC0E,EAAA,EAAD,CAAenH,MAAO4E,IAAgB,cAACnC,GAAD,mBAEpE,cAACH,GAAD,CACEwE,SAA4B,IAAlB7D,GAAuBS,IAAc4B,GAC/C2B,QAAO,sBAAE,sBAAAR,EAAA,6DACP9C,GAAa,GADN,SAEDyB,IAFC,OAGPzB,GAAa,GAHN,2CAFX,gCC5KN0D,IANSpF,YAAOM,IAAPN,CAAH,qFAMIA,IAAO1C,IAAV,wLASP+H,GAASrF,IAAO1C,IAAV,qPAgBNgI,GAAUtF,IAAO1C,IAAV,0JACK,SAAC2C,GAAD,OAAWA,EAAMC,MAAMC,KAAKC,cAKxCmF,GAAqBvF,YAAOwF,IAAPxF,CAAH,iDAyGTyF,GAvFqC,SAAC,GAY9C,IAXL5E,EAWI,EAXJA,KACAC,EAUI,EAVJA,cACAC,EASI,EATJA,eACAC,EAQI,EARJA,cACAC,EAOI,EAPJA,wBACAC,EAMI,EANJA,yBACAwE,EAKI,EALJA,SACAC,EAII,EAJJA,mBACAC,EAGI,EAHJA,QACA5G,EAEI,EAFJA,OACAmC,EACI,EADJA,QAEM0E,EAAqBF,GAAwD,QAAlCA,EAAmBG,WAAzC,YAClBH,EAAmB3I,MAAMC,KAAuBuC,QAAQ,IAC7D,IACIqC,EAAkHhB,EAAlHgB,SAAUkE,EAAwGlF,EAAxGkF,WAAYC,EAA4FnF,EAA5FmF,WAAYhE,EAAgFnB,EAAhFmB,MAAOhG,EAAyE6E,EAAzE7E,UAAW8F,EAA8DjB,EAA9DiB,YAAaF,EAAiDf,EAAjDe,YAAa3F,EAAoC4E,EAApC5E,eAAgBgK,EAAoBpF,EAApBoF,gBAChGhH,EAAU4C,GAAYA,EAASK,cAAcgE,QAAQ,UAAW,IAChEC,EAAwBC,YAAyB,CACrDC,kBAAmBL,EAAWjE,QAC9BiC,aAAchC,EAAMD,UAEhBuE,EAActK,EAAYuK,IAAwBC,IAClDtH,EAAe,UAAMoH,EAAN,YAAqBH,GACpCrC,EAAYhC,EAAY2E,IACxBzC,EAAehC,EAAMD,QAAQ0E,IAE7BC,EAAqB,oCADX9E,GAAe3F,EAEA+H,EACEF,GAC3B6C,EAAa,oCAAgCV,GAC7CW,EAAW,wCAAoChF,EAAcoC,EAAeF,GAElF,OACE,eAACwB,GAAD,WACE,cAAC,GAAD,CACEzE,KAAMA,EACNC,cAAeA,EACfC,eAAgBA,EAChBC,cAAeA,EACfC,wBAAyBA,EACzBC,yBAA0BA,EAC1BhC,gBAAiBA,EACjBiC,QAASA,IAEX,eAACiE,GAAD,CAASH,UAAU,YAAnB,UACE,eAACI,GAAD,WACE,eAAC,IAAD,CAAM9F,eAAe,gBAArB,UACE,eAAC,IAAD,WAAOsC,EAAP,OACA,eAAC,IAAD,eAAQgE,EAAR,UAEF,eAAC,IAAD,CAAMtG,eAAe,gBAArB,UACE,cAAC,IAAD,0BACA,cAAC,IAAD,UAAOwG,OAET,eAAC,IAAD,CAAMxG,eAAe,gBAArB,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,+BAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,UAAOmG,UAGX,cAACL,GAAD,UACE,cAAC,EAAD,CACErG,OAAQA,EACRC,QAASA,EACTC,gBAAiBA,EACjBC,WAAS,MAGb,eAACkG,GAAD,WACE,cAACE,GAAD,CAAoBsB,UAAQ,EAACC,KAAMJ,EAAnC,2BACA,cAACnB,GAAD,CAAoBsB,UAAQ,EAACC,KAAMH,EAAnC,+BACEf,GACA,cAACL,GAAD,CAAoBsB,UAAQ,EAACC,KAAM5H,EAAnC,uBACUD,KAGZ,cAACsG,GAAD,CAAoBsB,UAAQ,EAACC,KAAMF,EAAnC,sCC/IK5G,OAAO1C,IAAtB,gIACuB,qBAAG4C,MAAkBQ,OAAOqG,WCqB7CC,GAAmBhH,IAAO1C,IAAV,iEACV,SAAC2C,GAAD,OAAYA,EAAMgH,SAAW,OAAS,SAI5CC,GAAIlH,IAAO1C,IAAV,iLACS,SAAC2C,GAAD,OAAWA,EAAMC,MAAMC,KAAKC,cAMtC+G,GAASnH,YAAOoH,IAAPpH,CAAH,4CAwIGqH,GAvHyB,SAAC,GAA+D,IAA7DxG,EAA4D,EAA5DA,KAAM+E,EAAsD,EAAtDA,QAASlJ,EAA6C,EAA7CA,UAA+ByE,GAAc,EAAlCmG,SAAkC,EAAxBC,SAAwB,EAAdpG,SACvF,EAA0DG,oBAAS,GAAnE,mBAAOkG,EAAP,KAA8BC,EAA9B,KACQhL,EAAyPoE,EAAzPpE,IAAKiL,EAAoP7G,EAApP6G,oBAAoC7F,GAAgNhB,EAA/N8G,cAA+N9G,EAAhNgB,UAAU+F,EAAsM/G,EAAtM+G,OAAQ7B,EAA8LlF,EAA9LkF,WAAY/J,EAAkL6E,EAAlL7E,UAAWC,EAAuK4E,EAAvK5E,eAAgBC,EAAuJ2E,EAAvJ3E,kBAAmBC,EAAoI0E,EAApI1E,cAAeC,EAAqHyE,EAArHzE,eAA5I,EAAiQyE,EAArGgH,yBAA5J,MAAgL,EAAhL,IAAiQhH,EAA9EtE,8BAAnL,MAA4M,EAA5M,EAAwOC,EAAyBqE,EAAlDmF,WAAc8B,UACvNC,EAAYlG,EAASmG,MAAM,KAAK,GAAGC,oBAGrCjJ,EAASjD,EACXC,EACAC,EACAiM,OAAOhM,GACPC,EACAC,EACAK,EACAoL,EACAtL,EACA2L,OAAO1L,IAET,EAA+BwC,EAAvB3B,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,SAClB,EAAkDoD,EAAKsB,SAA/CG,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,cAAe2F,EAArC,EAAqCA,SAC/BC,EAAkB9F,EAAexF,YAAiB,IAAIC,IAAUuF,IAAiB,EACjF+F,EAAmB7F,EAAgB1F,YAAiB,IAAIC,IAAUyF,IAAkB,EACpF8F,EAAqBH,EAAWrL,YAAiB,IAAIC,IAAUoL,IAAa,EAE5EI,EAAa5L,YAAoBkE,EAAKc,KACxCgE,EAAqB,IAAI5I,IAAU,GAIlC4I,EAFA9E,EAAK5E,eAEgBsM,EAAWjL,IAAIL,KADlBV,EAAyB,IAAIQ,IAAUR,GAAwBe,IAAI,IAAIP,IAAU8K,IAAoB7K,MAAMR,GAAoBc,IAAIL,KAAyB,IAAIF,IAAU,GAGjM,IAAMkE,EAA0BqB,EAAe,IAAIvF,IAAUuF,GAActF,MAAM2I,GAAoBpI,WAAa,EAE5G2D,EAA2BsB,EAAgB,IAAIzF,IAAUyF,GAAexF,MAAM2I,GAAoBpI,WAAa,EAE/GiL,EAAqBd,EAAmB,WACtCQ,OAAO,IAAInL,IAAU2K,GAAqB1K,MAAMR,IAAqBmB,oBAAe8K,EAAW,CAAE7K,sBAAuB,KAC5H,IACE0B,EAAU7C,GAAOA,EAAIkB,eAAe,QAAS,CAAEC,sBAAuB,IAEtE8H,GAAYkC,GAAqB,IAAXA,EAAgB,aAAe,GAI3D,OAFA5I,EAAM,2BAAQA,GAAR,IAAgB5C,eAAgByE,EAAKzE,eAAgBkD,UAAS7C,IAAKoE,EAAKpE,IAAKC,YAAWF,mBAAoB0L,OAAO1L,KAGvH,qCACE,cAAC,GAAD,IACA,eAAC0K,GAAD,WACE,sBAAKjC,UAAU,mBAAf,UACE,qBAAKA,UAAU,MAAf,SAAqB,cAACkC,GAAD,CAAQuB,IAAG,wBAAmBX,EAAnB,QAAoCY,IAAK9G,EAAU/B,MAAO,GAAID,OAAQ,OACtG,sBAAKoF,UAAU,MAAf,UACE,cAAC,IAAD,CAAM1F,eAAe,aAAaE,WAAW,SAA7C,SACE,cAAC,IAAD,CAAMwF,UAAU,QAAhB,SAAyBpD,MAE3B,cAAC,IAAD,UAAO6D,KACP,eAAC,IAAD,mBAAY8C,QAEd,sBAAKvD,UAAU,MAAf,UACE,cAAC,EAAD,CACEjH,SAAS,OACTD,MAAON,EACPS,SAAU,EACVE,KAAK,MAEP,cAAC,EAAD,CACEJ,SAAS,OACTD,MAAOV,EACPa,SAAU,EACVE,KAAK,MAEP,cAAC,IAAD,UAAO2H,OAET,sBAAKd,UAAU,MAAf,UACE,cAAC,EAAD,CACEjH,SAAS,OACTD,MAAOqK,EACPlK,SAAUkK,EAAkB,EAAI,EAChChK,KAAK,KAEP,cAAC,EAAD,CACEJ,SAAS,OACTD,MAAOsK,EACPnK,SAAUmK,EAAmB,EAAI,EACjCjK,KAAK,KAEP,cAAC,EAAD,CACEJ,SAAS,OACTD,MAAOuK,EACPpK,SAAUoK,EAAqB,EAAI,EACnClK,KAAK,QAGT,qBAAK6G,UAAU,MAAf,SACE,cAAC2D,EAAA,EAAD,CACE5D,QAAS,kBAAMyC,GAA0BD,IACzCP,SAAUO,EACVqB,WAAS,SAIf,cAAC7B,GAAD,CAAkBC,SAAUO,EAA5B,SACE,cAAC,GAAD,CACE3G,KAAMA,EACNC,cAAesH,EACfrH,eAAgBsH,EAChBrH,cAAesH,EACfrH,wBAAyBA,EACzBC,yBAA0BA,EAC1BwE,SAAUA,GACVC,mBAAoBA,EACpBC,QAASA,EACT5G,OAAQA,EACRmC,QAASA,aCxJf2H,GAAa9I,YAAO+I,IAAP/I,CAAH,mDA6BDgJ,GAxB6B,SAAC,GAAqD,IAAnDjL,EAAkD,EAAlDA,MAAOG,EAA2C,EAA3CA,SAAU+K,EAAiC,EAAjCA,OAAiC,IAAzBjL,gBAAyB,MAAd,OAAc,EAC/F,EAA4BkL,qBAAW,CACrCxK,MAAO,EACPC,IAAKZ,EACLa,SAAU,EACVC,UAAW,IACXX,cAEeuK,IAAbvK,EAAyBA,EAAWH,EAAQ,EAAI,EAAIA,EAAQ,IAAM,EAAI,IAPlEoL,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAUXC,EAAc9K,iBAAO6K,GAM3B,OAJA5K,qBAAU,WACR6K,EAAY5K,QAAQV,KACnB,CAACA,EAAOsL,IAGT,eAACP,GAAD,CAAY9K,SAAUA,EAAtB,UACGiL,EAAQE,MCDTG,I,OAAatJ,IAAO1C,IAAV,kDAoJDiM,GA9IY,WACzB,IAAMC,EAAaC,cAKX3E,EAAazD,cAAbyD,SAER,EAA0C4E,cAA5BC,EAAd,EAAQC,KACFlN,GADN,EAAuBmN,eACLnH,eAEVvB,EAAY2I,cAAZ3I,QAEF4I,EAAWC,cACTC,EAAgBC,cAAhBD,YACRzL,qBAAU,WACJ2C,GACF4I,EAASI,YAAuBhJ,MAEjC,CAACA,EAAS4I,EAAUE,IAEvB,IAAMG,EAAatF,EAASC,SAAS,YAE/BsF,GADavF,EAASC,SAAS,aACJqF,EAM3BE,EAAcX,EAAQY,QAAO,SAAC1J,GAAD,OAAUA,EAAK7E,WAAiC,OAApB6E,EAAKkF,aAAwByE,YAAc3J,EAAKc,QAEzG8I,EAAYlG,uBAChB,SAACmG,GAYC,OAXqDA,EAAeC,KAAI,SAAC9J,GACvE,IAAKA,EAAK6G,oBACR,OAAO7G,EAGT,IAAM1D,EAAiB,IAAIJ,IAAU8D,EAAK6G,qBAAqB1K,MAAM6D,EAAKmF,WAAW8B,WAC/ErL,EAAM4N,EAAWjN,YAAWyD,EAAK+J,WAAYlO,EAAWS,GAAkB,EAEhF,OAAO,2BAAK0D,GAAZ,IAAkBpE,MAAKoO,UAAW1N,SAKtC,CAACT,EAAW2N,IAGRS,EAAsB5G,mBAAQ,WAClC,IAAI6G,EAAc,GAKlB,OAHIV,IACFU,EAAcN,EAAUH,IAEnBS,IACN,CACDT,EACAG,EACAJ,IAGF,OACE,qCACE,eAACW,EAAA,EAAD,WACE,sBAAK/F,UAAU,WAAf,UACE,cAAC,IAAD,CAASgG,GAAG,KAAKC,KAAK,MAAMjN,MAAM,YAAYkN,GAAG,OAAjD,sBAGA,eAAC,IAAD,WACE,cAAC,IAAD,CAAM9M,MAAI,EAACL,SAAS,OAApB,qBAGA,cAAC,GAAD,CAAWA,SAAS,OAAOD,MAAOyL,EAAWjM,WAAY0L,OAAO,IAAI/K,SAAU,UAGlF,cAAC,IAAD,CAAS+M,GAAG,KAAKC,KAAK,KAAKjN,MAAM,UAAUkN,GAAG,OAAOzL,MAAO,CAAE0L,UAAW,QAAzE,yCAGA,cAAC,IAAD,CAASH,GAAG,KAAKhN,MAAM,YAAYkN,GAAG,OAAOzL,MAAO,CAAE0L,UAAW,QAAjE,sEAGA,eAAC,IAAD,CAASH,GAAG,KAAKhN,MAAM,UAAUkN,GAAG,OAAOzL,MAAO,CAAE0L,UAAW,QAA/D,iCACsB,mBAAGC,OAAO,SAASC,IAAI,aAAaxE,KAAK,8CAAzC,qCADtB,0EAGA,cAAC,IAAD,CAASmE,GAAG,KAAKhN,MAAM,UAAUkN,GAAG,OAAOzL,MAAO,CAAE0L,UAAW,QAA/D,oMAGA,eAAC9B,GAAD,WACE,cAAC,IAAD,CAAS2B,GAAG,KAAKhN,MAAM,YAAYkN,GAAG,MAAMzL,MAAO,CAAE0L,UAAW,QAAhE,kBAGA,eAAC,IAAD,CAAM7L,eAAe,gBAArB,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,sBAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,8BACA,cAAC,IAAD,sBAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,0CACA,cAAC,IAAD,oBAEF,eAAC,IAAD,CAAMA,eAAe,gBAArB,UACE,cAAC,IAAD,6BACA,cAAC,IAAD,yDAIN,cAACgM,EAAA,EAAD,CAAMtG,UAAU,cAAhB,SACE,sBAAKuG,GAAG,WAAR,UACE,qBAAKA,GAAG,iBAAiBvG,UAAU,YAAnC,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,QACf,sBAAKA,UAAU,MAAf,UACE,cAAC,IAAD,oBACA,cAAC,IAAD,mBACA,cAAC,IAAD,qBAEF,sBAAKA,UAAU,MAAf,UACE,cAAC,IAAD,wBACA,cAAC,IAAD,wBACA,cAAC,IAAD,4BAEF,sBAAKA,UAAU,MAAf,UACE,cAAC,IAAD,sBACA,cAAC,IAAD,sBACA,cAAC,IAAD,yBAEF,qBAAKA,UAAU,aAGlB6F,EAAoBH,KAAI,SAAC9J,GAAD,OACvB,cAAC,GAAD,CAAwBA,KAAMA,EAAMnE,UAAWA,EAAWyE,QAASA,EAASyE,SAAS,GAAvE/E,EAAKc,kB","file":"static/js/7.0c2c4658.chunk.js","sourcesContent":["// import { useCallback } from 'react'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { getPoolApr, getFarmApr } from 'utils/apr'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useBusdPriceFromPid } from 'state/hooks'\r\n// import Balance from 'components/Balance'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst useKingdomAPRAPY = (\r\n  isKingdom: boolean,\r\n  isKingdomToken: boolean,\r\n  tokenPriceVsQuote: number,\r\n  poolWeightPCS: any,\r\n  pcsCompounding: number,\r\n  cubAPR: number,\r\n  lpTokenBalanceMC: number,\r\n  lpTotalInQuoteTokenPCS: number,\r\n  quoteTokenPriceUsd: number\r\n) => {\r\n  const cakePrice = useBusdPriceFromPid(0)\r\n  let apr:number\r\n\r\n  let extra = null\r\n  if (isKingdom) {\r\n    if (isKingdomToken)\r\n      apr = getPoolApr(\r\n        tokenPriceVsQuote,\r\n        tokenPriceVsQuote,\r\n        getBalanceNumber(new BigNumber(lpTokenBalanceMC).times(DEFAULT_TOKEN_DECIMAL), 18),\r\n        parseFloat('10'),\r\n      )\r\n    else {\r\n      const totalLiquidity = new BigNumber(lpTotalInQuoteTokenPCS).times(quoteTokenPriceUsd)\r\n\r\n      apr = getFarmApr(poolWeightPCS, cakePrice, totalLiquidity, isKingdom)\r\n    }\r\n\r\n    const dailyAPR = new BigNumber(apr).div(new BigNumber(365)).toNumber()\r\n\r\n    const farmAPY = ((((apr / 100 / pcsCompounding) + 1) ** pcsCompounding) - 1) * 100\r\n    const totalAPY = cubAPR ? cubAPR + farmAPY : farmAPY\r\n    const totalAPYString = totalAPY && totalAPY.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n    extra = { pcsApr: apr, dailyAPR, farmAPY, totalAPY, totalAPYString }\r\n  }\r\n\r\n  return extra\r\n}\r\n\r\nexport default useKingdomAPRAPY\r\n","import React, { useEffect, useRef } from 'react'\r\nimport CountUp from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface TextProps {\r\n  isDisabled?: boolean\r\n  fontSize?: string\r\n  color?: string\r\n  bold?: boolean\r\n}\r\n\r\ninterface BalanceProps extends TextProps {\r\n  value?: number\r\n  decimals?: number\r\n  unit?: string\r\n}\r\n\r\nconst Balance: React.FC<BalanceProps> = ({ value, fontSize, color, decimals, isDisabled, unit, bold }) => {\r\n  const previousValue = useRef(0)\r\n\r\n  useEffect(() => {\r\n    previousValue.current = value\r\n  }, [value])\r\n\r\n  return (\r\n    <Text bold={bold} color={isDisabled ? 'textDisabled' : color} fontSize={fontSize}>\r\n      <CountUp start={previousValue.current} end={value} decimals={decimals} duration={1} separator=\",\" />\r\n      {value && unit && <span>{unit}</span>}\r\n    </Text>\r\n  )\r\n}\r\n\r\nBalance.defaultProps = {\r\n  fontSize: '32px',\r\n  isDisabled: false,\r\n  color: 'text',\r\n  decimals: 3,\r\n}\r\n\r\nexport default Balance\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Text, Flex, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Balance from 'components/Balance'\r\n\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface AprApyProps {\r\n  aprApy: any\r\n  lpLabel: string\r\n  addLiquidityUrl: string\r\n  isDetails?: boolean\r\n}\r\n\r\nconst AprApy: React.FC<AprApyProps> = ({ aprApy,  lpLabel, addLiquidityUrl, isDetails }) => {\r\n  const TranslateString = useI18n()\r\n  const { farmAPR, apr, pcsCompounding, pcsApr, dailyAPR, farmAPY, totalAPYString, cakePrice } = aprApy\r\n\r\n  if (isDetails)\r\n    return (\r\n      <>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n          <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APR')}:</Text>\r\n          <Text>{`${new BigNumber(pcsApr).toFixed(2)}% (${new BigNumber(dailyAPR).toFixed(3)}%)`}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Compounds / year')}:</Text>\r\n          <Text>~{pcsCompounding}</Text>\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n          <Balance\r\n            fontSize=\"16px\"\r\n            value={farmAPY}\r\n            decimals={2}\r\n            unit=\"%\"\r\n          />\r\n        </Flex>\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {apr ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n                {farmAPR}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      </>\r\n    )\r\n\r\n  return (\r\n    <>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text color=\"warning\">{TranslateString(354, 'Total APY')}:</Text>\r\n        <Text bold color=\"warning\">{totalAPYString}%</Text>\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(354, 'Farm APY')}:</Text>\r\n        <Balance\r\n          fontSize=\"16px\"\r\n          value={farmAPY}\r\n          decimals={2}\r\n          unit=\"%\"\r\n        />\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Text>{TranslateString(736, 'CUB APR')}:</Text>\r\n        <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n          {apr ? (\r\n            <>\r\n              <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apr={apr} />\r\n              {farmAPR}%\r\n            </>\r\n          ) : (\r\n            <Skeleton height={24} width={80} />\r\n          )}\r\n        </Text>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AprApy\r\n","import React, { useState, useCallback, useMemo } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n// import BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\n// import { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Flex, Text, Button as UiButton, useModal } from '@pancakeswap-libs/uikit'\r\nimport Balance from 'components/Balance'\r\nimport CardBusdValue from 'views/Home/components/CardBusdValue'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport DepositModal from 'views/Farms/components/DepositModal'\r\nimport WithdrawModal from 'views/Farms/components/WithdrawModal'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport { getBep20Contract } from 'utils/contractHelpers'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useWeb3 from 'hooks/useWeb3'\r\n// import CardValue from './CardValue'\r\n\r\nimport './KingdomCard.css'\r\n\r\nconst KCard = styled.div`\r\n  align-self: baseline;\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  /*padding: 6px 12px;*/\r\n  position: relative;\r\n  margin-top: 0.5rem;\r\n  margin-bottom: 1rem;\r\n`\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 40px;\r\n  margin-top: 0.3rem;\r\n  display: block;\r\n`\r\n\r\nconst Values = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst Brackets = styled.span`\r\n  color: ${(props) => props.theme.colors.text};\r\n`\r\n\r\ninterface KingdomCardProps {\r\n  farm?: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  addLiquidityUrl: string\r\n  account?: string\r\n}\r\n\r\nconst KingdomCard: React.FC<KingdomCardProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue ,\r\n  addLiquidityUrl,\r\n  account\r\n}) => {\r\n  const location = useLocation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { pid, isTokenOnly, isKingdom, isKingdomToken, lpSymbol, lpAddresses, token: { address } } = farm\r\n\r\n  const tokenName = lpSymbol.toUpperCase()\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const earningsBusd = rewardBalance ? new BigNumber(rewardBalance).multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  const web3 = useWeb3()\r\n  const { onStake } = useStake(pid, isKingdom)\r\n  const { onUnstake } = useUnstake(pid, isKingdom)\r\n  const { onReward } = useHarvest(pid, isKingdom)\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} isTokenOnly={isTokenOnly} isKingdomToken={isKingdomToken} />,\r\n  )\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const tokenAddress = getAddress(address)\r\n  const lpContract = useMemo(() => {\r\n    if(isTokenOnly || isKingdomToken){\r\n      return getBep20Contract(tokenAddress, web3)\r\n    }\r\n    return getBep20Contract(lpAddress, web3)\r\n  }, [lpAddress, isTokenOnly, web3, tokenAddress, isKingdomToken])\r\n\r\n  const { onApprove } = useApprove(lpContract, isKingdom)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const approvedButton = (\r\n    <Button\r\n      mt=\"8px\"\r\n      disabled={requestedApproval || location.pathname.includes('archived')}\r\n      onClick={handleApprove}\r\n    >\r\n      Approve Contract\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <KCard>\r\n      <div className=\"k-card\">\r\n        <div className=\"flex-grid\">\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Balance (Wallet)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={walletBalance}\r\n                decimals={walletBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={walletBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentDeposit}>Deposit</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent='space-between'>\r\n              <Text>Deposit (Staked)</Text>\r\n            </Flex>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={depositBalance}\r\n                decimals={depositBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={depositBalanceQuoteValue} /><Brackets>)</Brackets>\r\n            </Values>\r\n            { isApproved ? (\r\n              <Button mt=\"8px\" fullWidth onClick={onPresentWithdraw}>Withdraw</Button>\r\n            ) : (\r\n              approvedButton\r\n            )}\r\n          </div>\r\n          <div className=\"col\">\r\n            <Text>CUB Rewards</Text>\r\n            <Values>\r\n              <Balance\r\n                fontSize=\"16px\"\r\n                value={rewardBalance}\r\n                decimals={rewardBalance ? 3 : 2}\r\n                unit=\"\"\r\n              />\r\n              &nbsp;<Brackets>(</Brackets><CardBusdValue value={earningsBusd} /><Brackets>)</Brackets>\r\n            </Values>\r\n            <Button\r\n              disabled={rewardBalance === 0 || pendingTx || !isApproved}\r\n              onClick={async () => {\r\n                setPendingTx(true)\r\n                await onReward()\r\n                setPendingTx(false)\r\n              }}\r\n            >\r\n              Harvest\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </KCard>\r\n  )\r\n}\r\n\r\nexport default KingdomCard\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Button as UiButton, Link, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { DEFAULT_TOKEN_DECIMAL, BASE_ADD_LIQUIDITY_URL, PCS_ADD_LIQUIDITY_URL } from 'config'\r\nimport AprApy from 'views/Farms/components/FarmCard/AprApy'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport KingdomCard from './KingdomCard'\r\n\r\nconst Button = styled(UiButton)`\r\n  height: 36px;\r\n  font-size: 1rem;\r\n  padding: 0 12px;\r\n`\r\n\r\nconst Details = styled.div`\r\n  margin-top: 1rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  /*padding-left: 0.8rem;\r\n  padding-right: 0.8rem;*/\r\n  /*font-size: 0.95rem*/\r\n`\r\n\r\nconst Detail = styled.div`\r\n  /*display: inline;\r\n  margin-right: 1rem;*/\r\n  /*& div {\r\n    font-family: Arial;\r\n    font-size: 0.8rem;\r\n    padding: 2px;\r\n  }*/\r\n  &:nth-child(1) {\r\n    width: 25%\r\n  }\r\n  &:nth-child(2) {\r\n    width: 33%\r\n  }\r\n`\r\n\r\nconst KDetail = styled.div`\r\n  /*background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);*/\r\n`\r\n\r\nconst StyledLinkExternal = styled(Link)`\r\n  font-weight: 400;\r\n`\r\n\r\ninterface KingdomDetailProps {\r\n  farm: FarmWithStakedValue\r\n  walletBalance: number\r\n  depositBalance: number\r\n  rewardBalance: number\r\n  walletBalanceQuoteValue: number\r\n  depositBalanceQuoteValue: number\r\n  farmName: string\r\n  oneTokenQuoteValue: BigNumber\r\n  removed?: boolean\r\n  aprApy?: any\r\n  account?: string\r\n}\r\n\r\nconst KingdomDetail: React.FC<KingdomDetailProps> = ({\r\n  farm,\r\n  walletBalance,\r\n  depositBalance,\r\n  rewardBalance,\r\n  walletBalanceQuoteValue,\r\n  depositBalanceQuoteValue,\r\n  farmName,\r\n  oneTokenQuoteValue,\r\n  removed,\r\n  aprApy,\r\n  account,\r\n}) => {\r\n  const tokenValueFormated = oneTokenQuoteValue && oneTokenQuoteValue.toString() !== 'NaN'\r\n    ? `~$${oneTokenQuoteValue.times(DEFAULT_TOKEN_DECIMAL).toFixed(2)}`\r\n    : '-'\r\n  const { lpSymbol, multiplier, quoteToken, token, isKingdom, lpAddresses, isTokenOnly, isKingdomToken, kingdomContract } = farm\r\n  const lpLabel = lpSymbol && lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const exchangeUrl = isKingdom ? PCS_ADD_LIQUIDITY_URL : BASE_ADD_LIQUIDITY_URL\r\n  const addLiquidityUrl = `${exchangeUrl}/${liquidityUrlPathParts}`\r\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\r\n  const tokenAddress = token.address[process.env.REACT_APP_CHAIN_ID]\r\n  const isToken = isTokenOnly || isKingdomToken\r\n  const farmContract= isToken ?\r\n    `https://bscscan.com/token/${tokenAddress}`\r\n    : `https://bscscan.com/token/${lpAddress}`\r\n  const vaultContract = `https://bscscan.com/token/${kingdomContract}`\r\n  const infoAddress = `https://pancakeswap.info/pair/${isTokenOnly ? tokenAddress : lpAddress}`\r\n\r\n  return (\r\n    <KDetail>\r\n      <KingdomCard\r\n        farm={farm}\r\n        walletBalance={walletBalance}\r\n        depositBalance={depositBalance}\r\n        rewardBalance={rewardBalance}\r\n        walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n        depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        account={account}\r\n      />\r\n      <Details className=\"k-details\">\r\n        <Detail>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>{lpSymbol}:</Text>\r\n            <Text>({tokenValueFormated})</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Multiplier:</Text>\r\n            <Text>{multiplier}</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Type:</Text>\r\n            <Text>Auto-compound</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Farm:</Text>\r\n            <Text>{farmName}</Text>\r\n          </Flex>\r\n        </Detail>\r\n        <Detail>\r\n          <AprApy\r\n            aprApy={aprApy}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n            isDetails\r\n          />\r\n        </Detail>\r\n        <Detail>\r\n          <StyledLinkExternal external href={farmContract}>Farm Contract</StyledLinkExternal>\r\n          <StyledLinkExternal external href={vaultContract}>Kingdom Contract</StyledLinkExternal>\r\n          {!removed && (\r\n            <StyledLinkExternal external href={addLiquidityUrl}>\r\n              {`Get ${lpLabel}`}\r\n            </StyledLinkExternal>\r\n          )}\r\n          <StyledLinkExternal external href={infoAddress}>See Token Info</StyledLinkExternal>\r\n        </Detail>\r\n      </Details>\r\n    </KDetail>\r\n  )\r\n}\r\n\r\nexport default KingdomDetail\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  /background-color: ${({ theme }) => theme.colors.primary};\r\n  opacity: 0.2;*/\r\n  height: 1px;\r\n  margin: 12px auto;\r\n  width: 100%;\r\n`\r\n","import React, { useState, useMemo } from 'react'\r\nimport { Text, Image, Flex } from '@pancakeswap-libs/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { provider } from 'web3-core'\r\nimport styled from 'styled-components'\r\n// import { IconButton } from '@pancakeswap-libs/uikit'\r\n// import { Farm } from 'state/types'\r\n// import { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\n// import { useFarmUser } from 'state/hooks'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useGetApiPrices, useBusdPriceFromPid } from 'state/hooks'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport useKingdomAPRAPY from 'hooks/useKingdomAPRAPY'\r\nimport Balance from 'components/Balance'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n\r\nimport KingdomDetail from './KingdomDetail'\r\n// import ExpandIcon from './ExpandIcon'\r\nimport Divider from './DividerBlue'\r\n// import LinkButton from './LinkButton'\r\n// import CardValue from './CardValue'\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\nconst K = styled.div`\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 8px;\r\n  box-shadow: 0 3px 4px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05);\r\n  padding: 0.4rem 0.8rem;\r\n`\r\n\r\nconst KImage = styled(Image)`\r\n  width: 64px;\r\n`\r\n\r\n// export interface FarmWithStakedValue extends Farm {\r\n//   apy?: BigNumber\r\n// }\r\n\r\ninterface KingdomProps {\r\n  farm: FarmWithStakedValue\r\n  removed?: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst Kingdom: React.FC<KingdomProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n  const { apr, lpTotalInQuoteToken, kingdomSupply, lpSymbol, pcsPid, multiplier, isKingdom, isKingdomToken, tokenPriceVsQuote, poolWeightPCS, pcsCompounding, lpTokenBalancePCS = 0, lpTotalInQuoteTokenPCS = 0, quoteToken: { busdPrice: quoteTokenPriceUsd } } = farm\r\n  const farmImage = lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n  // console.log('farm',farm.lpSymbol)\r\n\r\n  let aprApy = useKingdomAPRAPY(\r\n    isKingdom,\r\n    isKingdomToken,\r\n    Number(tokenPriceVsQuote),\r\n    poolWeightPCS,\r\n    pcsCompounding,\r\n    apr,\r\n    lpTokenBalancePCS,\r\n    lpTotalInQuoteTokenPCS,\r\n    Number(quoteTokenPriceUsd),\r\n  )\r\n  const { dailyAPR, totalAPY } = aprApy\r\n  const { tokenBalance, stakedBalance, earnings } = farm.userData\r\n  const rawTokenBalance = tokenBalance ? getBalanceNumber(new BigNumber(tokenBalance)) : 0\r\n  const rawStakedBalance = stakedBalance ? getBalanceNumber(new BigNumber(stakedBalance)) : 0\r\n  const rawEarningsBalance = earnings ? getBalanceNumber(new BigNumber(earnings)) : 0\r\n\r\n  const tokenPrice = useBusdPriceFromPid(farm.pid)\r\n  let oneTokenQuoteValue = new BigNumber(0)\r\n\r\n  if (!farm.isKingdomToken)\r\n    oneTokenQuoteValue = lpTotalInQuoteTokenPCS ? new BigNumber(lpTotalInQuoteTokenPCS).div(new BigNumber(lpTokenBalancePCS)).times(quoteTokenPriceUsd).div(DEFAULT_TOKEN_DECIMAL) : new BigNumber(0)\r\n  else oneTokenQuoteValue = tokenPrice.div(DEFAULT_TOKEN_DECIMAL)\r\n\r\n  const walletBalanceQuoteValue = tokenBalance ? new BigNumber(tokenBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const depositBalanceQuoteValue = stakedBalance ? new BigNumber(stakedBalance).times(oneTokenQuoteValue).toNumber() : 0\r\n\r\n  const totalValueFormated = lpTotalInQuoteToken\r\n    ? `$${Number(new BigNumber(lpTotalInQuoteToken).times(quoteTokenPriceUsd)).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n  const farmAPR = apr && apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n\r\n  const farmName = (pcsPid || pcsPid === 0) ? 'Pancake v2' : ''\r\n\r\n  aprApy = { ...aprApy, pcsCompounding: farm.pcsCompounding, farmAPR, apr: farm.apr, cakePrice, quoteTokenPriceUsd: Number(quoteTokenPriceUsd) }\r\n\r\n  return (\r\n    <>\r\n      <Divider />\r\n      <K>\r\n        <div className=\"flex-grid k-grid\">\r\n          <div className=\"col\"><KImage src={`/images/farms/${farmImage}.png`} alt={lpSymbol} width={64} height={64} /></div>\r\n          <div className=\"col\">\r\n            <Flex justifyContent=\"flex-start\" alignItems=\"center\">\r\n              <Text className=\"token\">{lpSymbol}</Text>\r\n            </Flex>\r\n            <Text>{farmName}</Text>\r\n            <Text> TVL {totalValueFormated}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={totalAPY}\r\n              decimals={2}\r\n              unit=\"%\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={dailyAPR}\r\n              decimals={2}\r\n              unit=\"%\"\r\n            />\r\n            <Text>{multiplier}</Text>\r\n          </div>\r\n          <div className=\"col\">\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawTokenBalance}\r\n              decimals={rawTokenBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawStakedBalance}\r\n              decimals={rawStakedBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n            <Balance\r\n              fontSize=\"16px\"\r\n              value={rawEarningsBalance}\r\n              decimals={rawEarningsBalance ? 2 : 1}\r\n              unit=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <ExpandableSectionButton\r\n              onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n              expanded={showExpandableSection}\r\n              onlyArrow\r\n            />\r\n          </div>\r\n        </div>\r\n        <ExpandingWrapper expanded={showExpandableSection}>\r\n          <KingdomDetail\r\n            farm={farm}\r\n            walletBalance={rawTokenBalance}\r\n            depositBalance={rawStakedBalance}\r\n            rewardBalance={rawEarningsBalance}\r\n            walletBalanceQuoteValue={walletBalanceQuoteValue}\r\n            depositBalanceQuoteValue={depositBalanceQuoteValue}\r\n            farmName={farmName}\r\n            oneTokenQuoteValue={oneTokenQuoteValue}\r\n            removed={removed}\r\n            aprApy={aprApy}\r\n            account={account}\r\n          />\r\n        </ExpandingWrapper>\r\n      </K>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdom\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  prefix?: string\r\n}\r\n\r\nconst StyledText = styled(Text)`\r\n  line-height: 1.5;\r\n\r\n`\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, prefix, fontSize = '16px', }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <StyledText fontSize={fontSize} >\r\n      {prefix}{countUp}\r\n    </StyledText>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\r\nimport { Heading, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\n// import { Image, Heading, RowType, Toggle, Text, Button, Flex } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\n// import FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\n// import { MigrationV2 } from 'components/Banner'\r\nimport { useFarms, usePriceCakeBusd, useGetApiPrices, useTotalValueKingdoms } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\n// import usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\n// import useI18n from 'hooks/useI18n'\r\n// import { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\n// import { orderBy } from 'lodash'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\n// import PageHeader from 'components/PageHeader'\r\n// import { fetchFarmsPublicDataAsync, setLoadArchivedFarmsData } from 'state/farms'\r\n// import { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n\r\n// import styled from 'styled-components'\r\n// import FlexLayout from 'components/layout/Flex'\r\n\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Kingdom from './components/Kingdom'\r\nimport CardValue from './components/CardValue'\r\nimport './Kingdoms.css'\r\n\r\nconst FeeWrapper = styled.div`\r\n  max-width: 400px;\r\n`\r\n\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Kingdoms: React.FC = () => {\r\n  const totalValue = useTotalValueKingdoms();\r\n  // const tvl = totalValue\r\n  //   ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n  //   : '-'\r\n  // const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  // const TranslateString = useI18n()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  // const [query, setQuery] = useState('')\r\n  const { account } = useWeb3React()\r\n\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.isKingdom && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      const farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const apr = isActive ? getFarmApr(farm.poolWeight, cakePrice, totalLiquidity) : 0\r\n// console.log('quoteTokenPriceUsd',quoteTokenPriceUsd)\r\n        return { ...farm, apr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, isActive],\r\n  )\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    if (isActive) {\r\n      farmsStaked = farmsList(activeFarms)\r\n    }\r\n    return farmsStaked\r\n  }, [\r\n    activeFarms,\r\n    farmsList,\r\n    isActive,\r\n  ])\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <div className='k-header'>\r\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"10px\">\r\n            Kingdoms\r\n          </Heading>\r\n          <Flex>\r\n            <Text bold fontSize=\"24px\">\r\n              TVL&nbsp;\r\n            </Text>\r\n            <CardValue fontSize=\"24px\" value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\r\n          </Flex>\r\n        </div>\r\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Composable Auto-Compounding\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"secondary\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          Stake tokens for cross-platform farming plus CUB rewards\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          IMPORTANT: Must use <a target=\"_blank\" rel=\"noreferrer\" href=\"https://exchange.pancakeswap.finance/#/pool\">Pancakeswap V2 Exchange</a> for V2 Kingdom LP tokens until we add a V2 exchange for Cub Finance\r\n        </Heading>\r\n        <Heading as=\"h2\" color=\"warning\" mb=\"10px\" style={{ textAlign: 'left' }}>\r\n          CertiK Audit is Pending: Our other contracts have been audited by CertiK and Kingdoms are currently under review. Please use at your own discretion until the audit has been published\r\n        </Heading>\r\n        <FeeWrapper>\r\n          <Heading as=\"h2\" color=\"secondary\" mb=\"5px\" style={{ textAlign: 'left' }}>\r\n            Fees\r\n          </Heading>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Management Fee:</Text>\r\n            <Text>0.9%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Withdrawal Fee:</Text>\r\n            <Text>None</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>Fee to CUB Staking Kingdom:</Text>\r\n            <Text>1%</Text>\r\n          </Flex>\r\n          <Flex justifyContent=\"space-between\">\r\n            <Text>CUB Burn Rate:</Text>\r\n            <Text>100% of Fees Buyback and Burn CUB</Text>\r\n          </Flex>\r\n        </FeeWrapper>\r\n      </PageHeader>\r\n      <Page className=\"k-container\">\r\n        <div id=\"kingdoms\">\r\n          <div id=\"content-header\" className=\"k-content\">\r\n            <div className=\"flex-grid k-grid\">\r\n              <div className=\"col\" />\r\n              <div className=\"col\">\r\n                <Text>Token</Text>\r\n                <Text>Farm</Text>\r\n                <Text>TVL</Text>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Text>Total APY</Text>\r\n                <Text>Daily APR</Text>\r\n                <Text>Multiplier</Text>\r\n              </div>\r\n              <div className=\"col\">\r\n                <Text>Balance</Text>\r\n                <Text>Deposit</Text>\r\n                <Text>Rewards</Text>\r\n              </div>\r\n              <div className=\"col\" />\r\n            </div>\r\n          </div>\r\n          {farmsStakedMemoized.map((farm) => (\r\n            <Kingdom key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\r\n          ))}\r\n        </div>\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Kingdoms\r\n"],"sourceRoot":""}